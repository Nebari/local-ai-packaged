include:
  - ./supabase/docker/docker-compose.yml

volumes:
  n8n_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:
  caddy-data:
  caddy-config:
  valkey-data:
  langfuse_postgres_data:
  langfuse_clickhouse_data:
  langfuse_clickhouse_logs:
  langfuse_minio_data:
  # KeikenV AI Services Extension - Shared Storage
  shared_models:
  shared_data:
  shared_outputs:
  # Individual AI service storage
  presenton_data:
  comfyui_data:
  invokeai_data:
  automatic1111_data:
  mlflow_data:
  litellm_data:
  # Perplexica AI Search Engine
  perplexica_data:
  perplexica_uploads:
  # Mem0 AI Memory Layer
  mem0_history:
  openmemory_data:
  openmemory_db:
  praisonai_data:
  praisonai_ui_data:
  # Pinokio AI App Launcher
  pinokio_data:
  # MCPO MCP-to-OpenAPI Proxy
  mcpo_data:

x-n8n: &service-n8n
  image: n8nio/n8n:1.95.1  # Updated from latest for stability
  networks:
    - default
    - keiken-network
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=db
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - WEBHOOK_URL=${N8N_HOSTNAME:+https://}${N8N_HOSTNAME:-http://localhost:5678}

# KeikenV AI Services Extension - Shared Templates
x-ai-shared-volumes: &ai-shared-volumes
  - ./shared/models:/shared_models:rw     # Shared model directory
  - ./shared/data:/shared_data:rw         # Cross-service data sharing  
  - ./shared/outputs:/shared_outputs:rw   # Generated content sharing

x-gpu-nvidia: &gpu-nvidia
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  restart: unless-stopped
  expose:
    - 11434/tcp
  networks:
    - default
    - keiken-network  # Connect to Keiken services like Perplexica
  environment:
    - OLLAMA_CONTEXT_LENGTH=8192
    - OLLAMA_FLASH_ATTENTION=1
    - OLLAMA_KV_CACHE_TYPE=q8_0
    - OLLAMA_MAX_LOADED_MODELS=2
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull qwen2.5:7b-instruct-q4_K_M; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"

services:
  flowise:
    image: flowiseai/flowise
    restart: unless-stopped
    container_name: flowise
    expose:
      - 3001/tcp
    networks:
      - default
      - keiken-network
    environment:
        - PORT=3001
        - FLOWISE_USERNAME=${FLOWISE_USERNAME}
        - FLOWISE_PASSWORD=${FLOWISE_PASSWORD}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
        - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    container_name: open-webui
    expose:
      - 8080/tcp
    networks:
      - default
      - keiken-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    expose:
      - 5678/tcp
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: unless-stopped
    expose:
      - 6333/tcp
      - 6334/tcp
    networks:
      - default
      - keiken-network
    volumes:
      - qdrant_storage:/qdrant/storage

  neo4j:
    image: neo4j:latest
    networks:
      - default
      - keiken-network
    volumes:
        - ./neo4j/logs:/logs
        - ./neo4j/config:/config
        - ./neo4j/data:/data
        - ./neo4j/plugins:/plugins
    expose:
      - 7473/tcp
      - 7474/tcp
      - 7687/tcp
    environment:
        - NEO4J_AUTH=${NEO4J_AUTH:-"neo4j/your_password"}
    restart: always

  caddy:
    container_name: caddy
    image: docker.io/library/caddy:2-alpine
    restart: unless-stopped
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 8010:8010/tcp  # LiteLLM via Caddy proxy
      - 8011:8011/tcp  # MLflow via Caddy proxy  
      - 8012:8012/tcp  # Presenton via Caddy proxy
    networks:
      - default
      - keiken-network  # Connect to Keiken services
    expose:
      - 2019/tcp
      - 443/tcp
      - 443/udp
      - 80/tcp
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./caddy-addon:/etc/caddy/addons:ro
      - caddy-data:/data:rw
      - caddy-config:/config:rw
    environment:
      - N8N_HOSTNAME=${N8N_HOSTNAME:-":8001"}
      - WEBUI_HOSTNAME=${WEBUI_HOSTNAME:-":8002"}
      - FLOWISE_HOSTNAME=${FLOWISE_HOSTNAME:-":8003"}
      - OLLAMA_HOSTNAME=${OLLAMA_HOSTNAME:-":8004"}
      - SUPABASE_HOSTNAME=${SUPABASE_HOSTNAME:-":8005"}
      - SEARXNG_HOSTNAME=${SEARXNG_HOSTNAME:-":8006"}
      - LANGFUSE_HOSTNAME=${LANGFUSE_HOSTNAME:-":8007"}
      - NEO4J_HOSTNAME=${NEO4J_HOSTNAME:-":8008"}
      # KeikenV Service Extensions
      - LITELLM_HOSTNAME=${LITELLM_HOSTNAME:-":8010"}
      - MLFLOW_HOSTNAME=${MLFLOW_HOSTNAME:-":8011"}
      - PRESENTON_HOSTNAME=${PRESENTON_HOSTNAME:-":8012"}
      # AI Image Generation Services
      - COMFYUI_HOSTNAME=${COMFYUI_HOSTNAME:-":8013"}
      - INVOKEAI_HOSTNAME=${INVOKEAI_HOSTNAME:-":8014"}
      - AUTOMATIC1111_HOSTNAME=${AUTOMATIC1111_HOSTNAME:-":8015"}
      # AI Search Services
      - PERPLEXICA_HOSTNAME=${PERPLEXICA_HOSTNAME:-":8016"}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-internal}
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  langfuse-worker:
    image: langfuse/langfuse-worker:3
    restart: always
    depends_on: &langfuse-depends-on
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    expose:
     - 3030/tcp
    environment: &langfuse-worker-env
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      SALT: ${LANGFUSE_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://clickhouse:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://clickhouse:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: ${LANGFUSE_S3_MEDIA_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: ${LANGFUSE_S3_MEDIA_UPLOAD_REGION:-auto}
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: ${LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: ${LANGFUSE_S3_MEDIA_UPLOAD_PREFIX:-media/}
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: ${LANGFUSE_S3_BATCH_EXPORT_ENABLED:-false}
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: ${LANGFUSE_S3_BATCH_EXPORT_BUCKET:-langfuse}
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: ${LANGFUSE_S3_BATCH_EXPORT_PREFIX:-exports/}
      LANGFUSE_S3_BATCH_EXPORT_REGION: ${LANGFUSE_S3_BATCH_EXPORT_REGION:-auto}
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: ${LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT:-http://localhost:9090}
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: ${LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: ${LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE:-true}
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ${LANGFUSE_INGESTION_QUEUE_DELAY_MS:-}
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ${LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS:-}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH: ${REDIS_AUTH:-LOCALONLYREDIS}
      REDIS_TLS_ENABLED: ${REDIS_TLS_ENABLED:-false}
      REDIS_TLS_CA: ${REDIS_TLS_CA:-/certs/ca.crt}
      REDIS_TLS_CERT: ${REDIS_TLS_CERT:-/certs/redis.crt}
      REDIS_TLS_KEY: ${REDIS_TLS_KEY:-/certs/redis.key}
    networks:
      - default
      - keiken-network

  langfuse-web:
    image: langfuse/langfuse:3
    restart: always
    depends_on: *langfuse-depends-on
    expose:
      - 3000/tcp
    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_URL: http://localhost:3002
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}
    networks:
      - default
      - keiken-network

  clickhouse:
    image: clickhouse/clickhouse-server
    restart: always
    user: "101:101"
    expose:
      - 8123/tcp
      - 9000/tcp
      - 9009/tcp
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s
    networks:
      - default
      - keiken-network

  minio:
    image: minio/minio
    restart: always
    entrypoint: sh
    # create the 'langfuse' bucket before starting the service
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'
    expose:
      - 9000/tcp
      - 9001/tcp
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s
    networks:
      - default
      - keiken-network

  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    expose:
      - 5432/tcp
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data
    networks:
      - default
      - keiken-network

  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: unless-stopped
    expose:
      - 6379/tcp
    volumes:
      - valkey-data:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10
    networks:
      - default
      - keiken-network

  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    expose:
      - 8080/tcp
    volumes:
      - ./searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-localhost}/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    networks:
      - default
      - keiken-network

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd

  # =============================
  # KEIKEN AI SERVICES EXTENSION  
  # =============================

  # PRESENTON - AI Presentation Service
  presenton:
    image: node:18-slim
    container_name: presenton
    restart: unless-stopped
    ports:
      - "8920:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - LITELLM_ENDPOINT=http://litellm:4000
      - LITELLM_API_KEY=${LITELLM_MASTER_KEY:-sk-1234}
    volumes:
      - presenton_data:/app/data
      - ./shared/data:/shared_data:ro
      - ./presenton:/app
    working_dir: /app
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          npm init -y &&
          npm install express cors multer axios marked highlight.js &&
          echo 'AI Presentation service initialized'
        fi &&
        node server.js
      "
    networks:
      - default
      - keiken-network

  # COMFYUI - AI Workflow Engine  
  x-comfyui: &service-comfyui
    image: yanwk/comfyui-boot:cu121
    container_name: comfyui
    restart: unless-stopped
    ports:
      - "127.0.0.1:8188:8188"
    environment:
      - CLI_ARGS=--listen 0.0.0.0 --port 8188
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      - comfyui_data:/root/ComfyUI
      - ./shared/models:/shared_models:rw
      - ./shared/data:/shared_data:rw
      - ./shared/outputs:/shared_outputs:rw
      - ./shared/models/checkpoints:/root/ComfyUI/models/checkpoints:rw
      - ./shared/models/lora:/root/ComfyUI/models/loras:rw
      - ./shared/models/vae:/root/ComfyUI/models/vae:rw
      - ./shared/models/controlnet:/root/ComfyUI/models/controlnet:rw
      - ./shared/models/embeddings:/root/ComfyUI/models/embeddings:rw
      - ./shared/models/upscale:/root/ComfyUI/models/upscale_models:rw
      - ./shared/outputs/comfyui:/root/ComfyUI/output:rw
    networks:
      - default
      - keiken-network

  comfyui-cpu:
    profiles: ["cpu"]
    <<: *service-comfyui

  comfyui-gpu:
    profiles: ["gpu-nvidia"]
    <<: [*service-comfyui, *gpu-nvidia]

  # INVOKEAI - Stable Diffusion WebUI
  x-invokeai: &service-invokeai
    image: ghcr.io/invoke-ai/invokeai:latest
    container_name: invokeai
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    environment:
      - INVOKEAI_ROOT=/invokeai
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    volumes:
      - invokeai_data:/invokeai
      - ./shared/models:/shared_models:rw
      - ./shared/data:/shared_data:rw
      - ./shared/outputs:/shared_outputs:rw
      - ./shared/models/checkpoints:/invokeai/autoimport/main:rw
      - ./shared/models/lora:/invokeai/autoimport/lora:rw
      - ./shared/models/vae:/invokeai/autoimport/vae:rw
      - ./shared/models/controlnet:/invokeai/autoimport/controlnet:rw
      - ./shared/models/embeddings:/invokeai/autoimport/embedding:rw
      - ./shared/outputs/invokeai:/invokeai/outputs:rw
    networks:
      - default
      - keiken-network

  invokeai-cpu:
    profiles: ["cpu"]
    <<: *service-invokeai

  invokeai-gpu:
    profiles: ["gpu-nvidia"]
    <<: [*service-invokeai, *gpu-nvidia]

  # AUTOMATIC1111 - Popular SD WebUI
  x-automatic1111: &service-automatic1111
    image: pytorch/pytorch:2.1.0-cuda12.1-cudnn8-devel
    container_name: automatic1111
    restart: unless-stopped
    ports:
      - "127.0.0.1:7860:7860"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - PYTHONUNBUFFERED=1
      - DEBIAN_FRONTEND=noninteractive
      - TZ=UTC
    volumes:
      - automatic1111_data:/workspace
      - ./shared/models:/shared_models:rw
      - ./shared/data:/shared_data:rw
      - ./shared/outputs:/shared_outputs:rw
      - ./shared/models/checkpoints:/workspace/models/Stable-diffusion:rw
      - ./shared/models/lora:/workspace/models/Lora:rw
      - ./shared/models/vae:/workspace/models/VAE:rw
      - ./shared/models/controlnet:/workspace/models/ControlNet:rw
      - ./shared/models/embeddings:/workspace/embeddings:rw
      - ./shared/models/upscale:/workspace/models/ESRGAN:rw
      - ./shared/outputs/automatic1111:/workspace/outputs:rw
    working_dir: /workspace
    command: >
      bash -c "
      apt-get update && apt-get install -y git wget curl libgl1-mesa-glx libglib2.0-0 &&
      if [ ! -f '/workspace/launch.py' ]; then 
        echo 'Cloning Stable Diffusion WebUI...' &&
        git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git /tmp/sd-webui &&
        echo 'Copying files to workspace...' &&
        cd /tmp/sd-webui &&
        cp -r * /workspace/ &&
        cp -r .[^.]* /workspace/ 2>/dev/null || true &&
        echo 'Setup complete, files copied to workspace.'
      fi &&
      cd /workspace &&
      pip install xformers --index-url https://download.pytorch.org/whl/cu121 &&
      python launch.py --listen --port 7860 --medvram --xformers --enable-insecure-extension-access --api --allow-code --skip-torch-cuda-test
      "
    networks:
      - default
      - keiken-network

  automatic1111-cpu:
    profiles: ["cpu"]
    <<: *service-automatic1111
    environment:
      - CLI_ARGS=--listen --port 7860 --use-cpu --precision full --no-half

  automatic1111-gpu:
    profiles: ["gpu-nvidia"]
    <<: [*service-automatic1111, *gpu-nvidia]

  # MLFLOW SERVER - ML Experiment Tracking
  mlflow-server:
    image: python:3.11-slim
    container_name: mlflow-server
    restart: unless-stopped
    expose:
      - 5000/tcp
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:////mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
      - MLFLOW_HOST=0.0.0.0
      - MLFLOW_PORT=5000
    volumes:
      - mlflow_data:/mlflow
      - ./shared/mlflow:/shared_mlflow:rw
    command: >
      bash -c "pip install mlflow==2.8.1 &&
               mlflow server
               --backend-store-uri sqlite:////mlflow/mlflow.db
               --default-artifact-root /mlflow/artifacts
               --host 0.0.0.0
               --port 5000"
    networks:
      - default
      - keiken-network

  # LITELLM - Universal LLM API Proxy
  litellm:
    image: litellm/litellm:latest
    container_name: litellm
    restart: unless-stopped
    expose:
      - 4000/tcp
    environment:
      - LITELLM_LOG=DEBUG
      - LITELLM_DROP_PARAMS=true
    volumes:
      - litellm_data:/app/data
      - ./shared/data:/shared_data:ro
    command: ["litellm", "--host", "0.0.0.0", "--port", "4000", "--model", "ollama/llama3.1:8b", "--api_base", "http://ollama:11434", "--drop_params"]
    networks:
      - default
      - keiken-network

  # PERPLEXICA - AI-powered search engine
  perplexica:
    image: itzcrazykns1337/perplexica:latest
    container_name: perplexica
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - perplexica_data:/home/perplexica/data
      - perplexica_uploads:/home/perplexica/uploads
      - ./shared/data:/shared_data:rw
    networks:
      - keiken-network
    environment:
      - NODE_ENV=production
    depends_on:
      - searxng

  # MEM0 - Simple AI Memory Layer 
  mem0-server:
    build:
      context: ./mem0
      dockerfile: Dockerfile
    container_name: mem0-server
    restart: unless-stopped
    ports:
      - "8764:8000"
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - mem0_history:/app/data
      - ./shared/data:/shared_data:rw
    networks:
      - default
      - keiken-network

  # Simple MCP Memory Server - Model Context Protocol
  openmemory-mcp:
    build:
      context: ./openmemory
      dockerfile: Dockerfile
    container_name: openmemory-mcp
    restart: unless-stopped
    ports:
      - "8765:8000"
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - openmemory_data:/app/data
      - ./shared/data:/shared_data:rw
    networks:
      - default
      - keiken-network

  # KEIKEN - Multi-Agent Teams API
  keiken-teams-api:
    build:
      context: ./praisonai
      dockerfile: Dockerfile
    container_name: keiken-teams-api
    restart: unless-stopped
    ports:
      - "8766:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME:-gpt-3.5-turbo}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-}
    volumes:
      - praisonai_data:/app/data
      - ./shared/data:/shared_data:rw
    networks:
      - default
      - keiken-network

  keiken-main-ui:
    build:
      context: ./praisonai
      dockerfile: Dockerfile.streamlit
    container_name: keiken-main-ui
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - default
      - keiken-network

  keiken-ui-interface:
    build:
      context: ./praisonai
      dockerfile: Dockerfile.ui
    container_name: keiken-ui-interface
    restart: unless-stopped
    ports:
      - "8582:8082"
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - default
      - keiken-network

  keiken-code-interface:
    build:
      context: ./praisonai
      dockerfile: Dockerfile.code
    container_name: keiken-code-interface
    restart: unless-stopped
    ports:
      - "8502:8501"
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - default
      - keiken-network

  keiken-chat-interface:
    build:
      context: ./praisonai
      dockerfile: Dockerfile.chat
    container_name: keiken-chat-interface
    restart: unless-stopped
    ports:
      - "8503:8503"
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - default
      - keiken-network

  pinokio:
    build:
      context: ./pinokio
      dockerfile: Dockerfile
    container_name: pinokio
    restart: unless-stopped
    ports:
      - "8900:8900"  # Web interface
    environment:
      - NODE_ENV=production
      - DISPLAY=:99
    volumes:
      - pinokio_data:/root/.pinokio
      - ./shared/data:/shared_data:rw
      - ./shared/models:/shared_models:rw
      - ./shared/outputs:/shared_outputs:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw  # Docker socket access
    networks:
      - default
      - keiken-network

  # STATUS DASHBOARD - KeikenV Services Monitoring
  status-dashboard:
    image: node:18-slim
    container_name: status-dashboard
    restart: unless-stopped
    ports:
      - "8930:3100"  # External access for development
    expose:
      - 3100/tcp
    environment:
      - NODE_ENV=production
      - PORT=3100
    volumes:
      - ./status-dashboard:/app
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          npm init -y &&
          npm install express axios cors &&
          echo 'Status Dashboard service initialized'
        fi &&
        npm install &&
        node server.js
      "
    networks:
      - default
      - keiken-network

  # MCPO - MCP-to-OpenAPI Proxy for Model Context Protocol servers
  mcpo:
    image: ghcr.io/open-webui/mcpo:main
    container_name: mcpo
    restart: unless-stopped
    ports:
      - "8940:8000"  # External access for MCPO API
    expose:
      - 8000/tcp
    environment:
      - MCPO_API_KEY=keiken-mcpo-secret-2024  # API key for securing access
      - MCPO_PORT=8000
      - MCPO_HOST=0.0.0.0
    volumes:
      - mcpo_data:/app/data
      - ./mcpo:/app/config  # Configuration directory
    networks:
      - default
      - keiken-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["--config", "/app/config/mcpo.json", "--hot-reload", "--port", "8000", "--api-key", "keiken-mcpo-secret-2024"]

# Network configuration
networks:
  keiken-network:
    external: true
    name: keiken-network
